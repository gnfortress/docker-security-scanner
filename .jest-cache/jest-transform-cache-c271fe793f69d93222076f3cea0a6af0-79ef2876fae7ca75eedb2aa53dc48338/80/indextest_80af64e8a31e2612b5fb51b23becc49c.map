{"version":3,"names":["core","require","github","exec","fs","axios","moduleUnderTest","error","console","warn","installTrivy","getLatestTrivyVersion","pullDockerImage","runTrivyScan","processScanResults","sendSlackNotification","addPRComment","describe","beforeEach","test","expectedVersion","global","mockAxios","get","mockResolvedValueOnce","data","tag_name","status","version","expect","toBe","toHaveBeenCalledWith","headers","mockRejectedValueOnce","Error","mockCore","warning","stringContaining","mockExec","silent","info","Object","defineProperty","process","value","writable","configurable","mockResolvedValue","arrayContaining","testUtils","expectAsyncError","specificVersion","image","images","setupMocks","mockResults","createMockScanResults","mockFs","readFileSync","mockReturnValue","JSON","stringify","results","toEqual","toHaveBeenCalledTimes","setupErrorMocks","mockScanResults","Results","Vulnerabilities","Severity","vulnerabilityCount","criticalCount","highCount","mediumCount","lowCount","scanStatus","scanTimestamp","any","String","detailedResults","reportPath","complexResults","webhookUrl","createMockProcessedResults","imageName","post","objectContaining","username","icon_emoji","attachments","color","title","call","mock","calls","payload","mockGitHubContext","context","eventName","pull_request","number","getOctokit","octokit","rest","issues","createComment","owner","repo","issue_number","body","comment","toContain","run","log","getInput","mockImplementation","name","inputs","setOutput","setFailed","timeoutError","code","memoryError","mockImplementationOnce"],"sources":["index.test.js"],"sourcesContent":["/**\r\n * GnFortress Docker Security Scanner 테스트\r\n * setup.js에서 제공하는 mock과 유틸리티를 활용\r\n */\r\n\r\n// Jest mock은 setup.js에서 처리되므로 여기서는 모듈만 import\r\nconst core = require('@actions/core');\r\nconst github = require('@actions/github');\r\nconst exec = require('@actions/exec');\r\nconst fs = require('fs');\r\nconst axios = require('axios');\r\n\r\n// 실제 모듈은 테스트 환경에서만 export되므로 조건부 import\r\nlet moduleUnderTest;\r\ntry {\r\n  moduleUnderTest = require('../src/index');\r\n} catch (error) {\r\n  console.warn('⚠️ Could not import module under test. Make sure to add exports to src/index.js');\r\n  moduleUnderTest = {};\r\n}\r\n\r\nconst { \r\n  installTrivy, \r\n  getLatestTrivyVersion,\r\n  pullDockerImage,\r\n  runTrivyScan,\r\n  processScanResults,\r\n  sendSlackNotification,\r\n  addPRComment \r\n} = moduleUnderTest;\r\n\r\ndescribe('🏰 GnFortress Docker Security Scanner', () => {\r\n  \r\n  // setup.js에서 beforeEach로 자동 초기화되므로 추가 설정만 필요시 사용\r\n  beforeEach(() => {\r\n    // 테스트별 특별한 설정이 있다면 여기에 추가\r\n  });\r\n\r\n  describe('🚀 getLatestTrivyVersion', () => {\r\n    test('최신 Trivy 버전을 성공적으로 가져온다', async () => {\r\n      // Arrange - setup.js의 testUtils 활용\r\n      const expectedVersion = '0.49.1';\r\n      global.mockAxios.get.mockResolvedValueOnce({\r\n        data: { tag_name: `v${expectedVersion}` },\r\n        status: 200\r\n      });\r\n\r\n      // Act\r\n      const version = await getLatestTrivyVersion();\r\n\r\n      // Assert\r\n      expect(version).toBe(expectedVersion);\r\n      expect(global.mockAxios.get).toHaveBeenCalledWith(\r\n        'https://api.github.com/repos/aquasecurity/trivy/releases/latest',\r\n        {\r\n          headers: {\r\n            'User-Agent': 'GnFortress-Docker-Scanner'\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n    test('API 호출 실패 시 기본값을 반환한다', async () => {\r\n      // Arrange\r\n      global.mockAxios.get.mockRejectedValueOnce(new Error('Network error'));\r\n\r\n      // Act\r\n      const version = await getLatestTrivyVersion();\r\n\r\n      // Assert\r\n      expect(version).toBe('0.49.1');\r\n      expect(global.mockCore.warning).toHaveBeenCalledWith(\r\n        expect.stringContaining('Failed to get latest Trivy version')\r\n      );\r\n    });\r\n\r\n    test('빈 응답 처리', async () => {\r\n      // Arrange\r\n      global.mockAxios.get.mockResolvedValueOnce({\r\n        data: {},\r\n        status: 200\r\n      });\r\n\r\n      // Act\r\n      const version = await getLatestTrivyVersion();\r\n\r\n      // Assert\r\n      expect(version).toBe('0.49.1'); // 기본값 반환\r\n    });\r\n  });\r\n\r\n  describe('🔧 installTrivy', () => {\r\n    test('Trivy가 이미 설치되어 있으면 설치를 건너뛴다', async () => {\r\n      // Arrange\r\n      global.mockExec.exec\r\n        .mockResolvedValueOnce(0); // trivy version 명령 성공\r\n\r\n      // Act\r\n      await installTrivy();\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith(\r\n        'trivy', \r\n        ['version'], \r\n        { silent: true }\r\n      );\r\n      expect(global.mockCore.info).toHaveBeenCalledWith('✅ Trivy is already installed');\r\n    });\r\n\r\n    test('Linux에서 Trivy를 성공적으로 설치한다', async () => {\r\n      // Arrange\r\n      Object.defineProperty(process, 'platform', { \r\n        value: 'linux', \r\n        writable: true, \r\n        configurable: true \r\n      });\r\n      Object.defineProperty(process, 'arch', { \r\n        value: 'x64', \r\n        writable: true, \r\n        configurable: true \r\n      });\r\n      \r\n      global.mockExec.exec\r\n        .mockRejectedValueOnce(new Error('trivy not found')) // 첫 번째 호출은 실패\r\n        .mockResolvedValue(0); // 나머지 호출은 성공\r\n      \r\n      global.mockAxios.get.mockResolvedValueOnce({\r\n        data: { tag_name: 'v0.49.1' }\r\n      });\r\n\r\n      // Act\r\n      await installTrivy('latest');\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('curl', [\r\n        '-L', '-o', 'trivy_0.49.1_Linux-amd64.tar.gz',\r\n        'https://github.com/aquasecurity/trivy/releases/download/v0.49.1/trivy_0.49.1_Linux-amd64.tar.gz'\r\n      ]);\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('tar', ['-xzf', 'trivy_0.49.1_Linux-amd64.tar.gz']);\r\n    });\r\n\r\n    test('macOS에서 Trivy를 성공적으로 설치한다', async () => {\r\n      // Arrange\r\n      Object.defineProperty(process, 'platform', { \r\n        value: 'darwin', \r\n        writable: true, \r\n        configurable: true \r\n      });\r\n      \r\n      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found'));\r\n      global.mockAxios.get.mockResolvedValueOnce({\r\n        data: { tag_name: 'v0.49.1' }\r\n      });\r\n\r\n      // Act\r\n      await installTrivy();\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('curl', \r\n        expect.arrayContaining([\r\n          expect.stringContaining('trivy_0.49.1_macOS-amd64.tar.gz')\r\n        ])\r\n      );\r\n    });\r\n\r\n    test('지원되지 않는 플랫폼에서 에러를 던진다', async () => {\r\n      // Arrange\r\n      Object.defineProperty(process, 'platform', { \r\n        value: 'win32', \r\n        writable: true, \r\n        configurable: true \r\n      });\r\n      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found'));\r\n\r\n      // Act & Assert - setup.js의 헬퍼 사용\r\n      await global.testUtils.expectAsyncError(\r\n        () => installTrivy(),\r\n        'Unsupported platform: win32'\r\n      );\r\n    });\r\n\r\n    test('특정 버전으로 설치한다', async () => {\r\n      // Arrange\r\n      const specificVersion = '0.48.0';\r\n      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found'));\r\n\r\n      // Act\r\n      await installTrivy(specificVersion);\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('curl', \r\n        expect.arrayContaining([\r\n          expect.stringContaining(`trivy_${specificVersion}_`)\r\n        ])\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('🐳 pullDockerImage', () => {\r\n    test('Docker 이미지를 성공적으로 pull한다', async () => {\r\n      // Arrange\r\n      const image = 'nginx:latest';\r\n      global.mockExec.exec.mockResolvedValueOnce(0);\r\n\r\n      // Act\r\n      await pullDockerImage(image);\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('docker', ['pull', image]);\r\n      expect(global.mockCore.info).toHaveBeenCalledWith(`✅ Successfully pulled image: ${image}`);\r\n    });\r\n\r\n    test('Docker pull 실패 시 경고를 출력하고 계속 진행한다', async () => {\r\n      // Arrange\r\n      const image = 'nonexistent:latest';\r\n      global.mockExec.exec.mockRejectedValueOnce(new Error('Pull failed'));\r\n\r\n      // Act\r\n      await pullDockerImage(image);\r\n\r\n      // Assert\r\n      expect(global.mockCore.warning).toHaveBeenCalledWith(\r\n        expect.stringContaining(`Failed to pull image ${image}`)\r\n      );\r\n      expect(global.mockCore.info).toHaveBeenCalledWith(\r\n        'ℹ️ Continuing with scan - image might already exist locally'\r\n      );\r\n    });\r\n\r\n    test('다양한 이미지 형식을 처리한다', async () => {\r\n      // Arrange\r\n      const images = [\r\n        'nginx',\r\n        'nginx:1.21',\r\n        'gcr.io/project/image:tag',\r\n        'registry.hub.docker.com/library/ubuntu:20.04'\r\n      ];\r\n\r\n      // Act & Assert\r\n      for (const image of images) {\r\n        global.setupMocks(); // 각 테스트마다 mock 초기화\r\n        await pullDockerImage(image);\r\n        expect(global.mockExec.exec).toHaveBeenCalledWith('docker', ['pull', image]);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('🔍 runTrivyScan', () => {\r\n    test('Trivy 스캔을 성공적으로 실행한다', async () => {\r\n      // Arrange\r\n      const mockResults = global.testUtils.createMockScanResults();\r\n      global.mockExec.exec.mockResolvedValue(0);\r\n      global.mockFs.readFileSync.mockReturnValue(JSON.stringify(mockResults));\r\n\r\n      // Act\r\n      const results = await runTrivyScan('nginx:latest', 'MEDIUM', 'json', true);\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', [\r\n        'image',\r\n        '--format', 'json',\r\n        '--output', 'trivy-results.json',\r\n        '--severity', 'MEDIUM',\r\n        '--quiet',\r\n        '--exit-code', '0',\r\n        'nginx:latest'\r\n      ]);\r\n      expect(results).toEqual(mockResults);\r\n    });\r\n\r\n    test('캐시가 비활성화된 상태로 스캔을 실행한다', async () => {\r\n      // Arrange\r\n      global.mockExec.exec.mockResolvedValue(0);\r\n      global.mockFs.readFileSync.mockReturnValue('{\"Results\": []}');\r\n\r\n      // Act\r\n      await runTrivyScan('nginx:latest', 'HIGH', 'json', false);\r\n\r\n      // Assert\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', \r\n        expect.arrayContaining(['--no-cache'])\r\n      );\r\n    });\r\n\r\n    test('다른 출력 형식으로 추가 파일을 생성한다', async () => {\r\n      // Arrange\r\n      global.mockExec.exec.mockResolvedValue(0);\r\n      global.mockFs.readFileSync.mockReturnValue('{\"Results\": []}');\r\n\r\n      // Act\r\n      await runTrivyScan('nginx:latest', 'HIGH', 'table', true);\r\n\r\n      // Assert\r\n      // JSON 형식으로 한 번, table 형식으로 한 번 더 실행되어야 함\r\n      expect(global.mockExec.exec).toHaveBeenCalledTimes(2);\r\n      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', \r\n        expect.arrayContaining(['--format', 'table'])\r\n      );\r\n    });\r\n\r\n    test('스캔 실패 시 적절한 에러를 던진다', async () => {\r\n      // Arrange\r\n      global.setupErrorMocks();\r\n\r\n      // Act & Assert\r\n      await global.testUtils.expectAsyncError(\r\n        () => runTrivyScan('invalid:image', 'HIGH', 'json', true),\r\n        'Trivy scan failed'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('📊 processScanResults', () => {\r\n    test('스캔 결과를 올바르게 처리한다', async () => {\r\n      // Arrange\r\n      const mockScanResults = global.testUtils.createMockScanResults({\r\n        Results: [\r\n          {\r\n            Vulnerabilities: [\r\n              { Severity: 'CRITICAL' },\r\n              { Severity: 'HIGH' },\r\n              { Severity: 'MEDIUM' },\r\n              { Severity: 'LOW' }\r\n            ]\r\n          }\r\n        ]\r\n      });\r\n\r\n      // Act\r\n      const results = await processScanResults(mockScanResults, 'MEDIUM');\r\n\r\n      // Assert\r\n      expect(results).toEqual({\r\n        vulnerabilityCount: 4,\r\n        criticalCount: 1,\r\n        highCount: 1,\r\n        mediumCount: 1,\r\n        lowCount: 1,\r\n        scanStatus: 'failure', // critical이 있으므로 failure\r\n        scanTimestamp: expect.any(String),\r\n        detailedResults: mockScanResults,\r\n        reportPath: 'trivy-results.json'\r\n      });\r\n    });\r\n\r\n    test('취약점이 없을 때 성공 상태를 반환한다', async () => {\r\n      // Arrange\r\n      const mockScanResults = { Results: [] };\r\n\r\n      // Act\r\n      const results = await processScanResults(mockScanResults, 'MEDIUM');\r\n\r\n      // Assert\r\n      expect(results.scanStatus).toBe('success');\r\n      expect(results.vulnerabilityCount).toBe(0);\r\n      expect(results.criticalCount).toBe(0);\r\n    });\r\n\r\n    test('High 취약점만 있을 때 warning 상태를 반환한다', async () => {\r\n      // Arrange\r\n      const mockScanResults = {\r\n        Results: [\r\n          {\r\n            Vulnerabilities: [\r\n              { Severity: 'HIGH' },\r\n              { Severity: 'MEDIUM' }\r\n            ]\r\n          }\r\n        ]\r\n      };\r\n\r\n      // Act\r\n      const results = await processScanResults(mockScanResults, 'MEDIUM');\r\n\r\n      // Assert\r\n      expect(results.scanStatus).toBe('warning');\r\n      expect(results.highCount).toBe(1);\r\n      expect(results.criticalCount).toBe(0);\r\n    });\r\n\r\n    test('복잡한 스캔 결과를 처리한다', async () => {\r\n      // Arrange\r\n      const complexResults = {\r\n        Results: [\r\n          {\r\n            Vulnerabilities: [\r\n              { Severity: 'CRITICAL' },\r\n              { Severity: 'CRITICAL' }\r\n            ]\r\n          },\r\n          {\r\n            Vulnerabilities: [\r\n              { Severity: 'HIGH' },\r\n              { Severity: 'MEDIUM' },\r\n              { Severity: 'LOW' }\r\n            ]\r\n          }\r\n        ]\r\n      };\r\n\r\n      // Act\r\n      const results = await processScanResults(complexResults, 'LOW');\r\n\r\n      // Assert\r\n      expect(results.vulnerabilityCount).toBe(5);\r\n      expect(results.criticalCount).toBe(2);\r\n      expect(results.highCount).toBe(1);\r\n      expect(results.mediumCount).toBe(1);\r\n      expect(results.lowCount).toBe(1);\r\n    });\r\n\r\n    test('잘못된 스캔 결과 형식을 처리한다', async () => {\r\n      // Act & Assert\r\n      await global.testUtils.expectAsyncError(\r\n        () => processScanResults(null, 'MEDIUM'),\r\n        'Failed to process scan results'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('📱 sendSlackNotification', () => {\r\n    test('성공 상태의 Slack 알림을 전송한다', async () => {\r\n      // Arrange\r\n      const webhookUrl = 'https://hooks.slack.com/test';\r\n      const results = global.testUtils.createMockProcessedResults({\r\n        scanStatus: 'success',\r\n        vulnerabilityCount: 0,\r\n        criticalCount: 0\r\n      });\r\n      const imageName = 'nginx:latest';\r\n      \r\n      global.mockAxios.post.mockResolvedValueOnce({ status: 200 });\r\n\r\n      // Act\r\n      await sendSlackNotification(webhookUrl, results, imageName);\r\n\r\n      // Assert\r\n      expect(global.mockAxios.post).toHaveBeenCalledWith(\r\n        webhookUrl,\r\n        expect.objectContaining({\r\n          username: 'GnFortress Security Scanner',\r\n          icon_emoji: ':shield:',\r\n          attachments: expect.arrayContaining([\r\n            expect.objectContaining({\r\n              color: 'good',\r\n              title: '✅ Docker Security Scan Results'\r\n            })\r\n          ])\r\n        }),\r\n        expect.objectContaining({\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n      );\r\n      expect(global.mockCore.info).toHaveBeenCalledWith('✅ Slack notification sent successfully');\r\n    });\r\n\r\n    test('경고 상태의 Slack 알림을 전송한다', async () => {\r\n      // Arrange\r\n      const results = global.testUtils.createMockProcessedResults({\r\n        scanStatus: 'warning'\r\n      });\r\n      \r\n      // Act\r\n      await sendSlackNotification('https://hooks.slack.com/test', results, 'test:latest');\r\n\r\n      // Assert\r\n      const call = global.mockAxios.post.mock.calls[0];\r\n      const payload = call[1];\r\n      expect(payload.attachments[0].color).toBe('warning');\r\n      expect(payload.attachments[0].title).toBe('⚠️ Docker Security Scan Results');\r\n    });\r\n\r\n    test('실패 상태의 Slack 알림을 전송한다', async () => {\r\n      // Arrange\r\n      const results = global.testUtils.createMockProcessedResults({\r\n        scanStatus: 'failure',\r\n        criticalCount: 5\r\n      });\r\n      \r\n      // Act\r\n      await sendSlackNotification('https://hooks.slack.com/test', results, 'vulnerable:image');\r\n\r\n      // Assert\r\n      const call = global.mockAxios.post.mock.calls[0];\r\n      const payload = call[1];\r\n      expect(payload.attachments[0].color).toBe('danger');\r\n      expect(payload.attachments[0].title).toBe('❌ Docker Security Scan Results');\r\n    });\r\n\r\n    test('Slack 알림 전송 실패 시 경고를 출력한다', async () => {\r\n      // Arrange\r\n      global.mockAxios.post.mockRejectedValueOnce(new Error('Network error'));\r\n\r\n      // Act\r\n      await sendSlackNotification('invalid-url', {}, 'test:latest');\r\n\r\n      // Assert\r\n      expect(global.mockCore.warning).toHaveBeenCalledWith(\r\n        expect.stringContaining('Failed to send Slack notification')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('💬 addPRComment', () => {\r\n    test('PR 이벤트에서 댓글을 성공적으로 추가한다', async () => {\r\n      // Arrange\r\n      global.mockGitHubContext.context.eventName = 'pull_request';\r\n      global.mockGitHubContext.context.payload = {\r\n        pull_request: { number: 123 }\r\n      };\r\n\r\n      const results = global.testUtils.createMockProcessedResults();\r\n\r\n      // Act\r\n      await addPRComment('test-token', results, 'nginx:latest');\r\n\r\n      // Assert\r\n      expect(global.mockGitHubContext.getOctokit).toHaveBeenCalledWith('test-token');\r\n      \r\n      const octokit = global.mockGitHubContext.getOctokit();\r\n      expect(octokit.rest.issues.createComment).toHaveBeenCalledWith({\r\n        owner: 'gnfortress',\r\n        repo: 'docker-security-scanner',\r\n        issue_number: 123,\r\n        body: expect.stringContaining('Docker Security Scan Results')\r\n      });\r\n      expect(global.mockCore.info).toHaveBeenCalledWith('✅ PR comment added successfully');\r\n    });\r\n\r\n    test('PR 이벤트가 아닐 때 댓글 추가를 건너뛴다', async () => {\r\n      // Arrange\r\n      global.mockGitHubContext.context.eventName = 'push';\r\n\r\n      // Act\r\n      await addPRComment('test-token', {}, 'nginx:latest');\r\n\r\n      // Assert\r\n      expect(global.mockCore.info).toHaveBeenCalledWith(\r\n        'ℹ️ Not a pull request event, skipping PR comment'\r\n      );\r\n    });\r\n\r\n    test('Critical 취약점이 있을 때 경고 메시지를 포함한다', async () => {\r\n      // Arrange\r\n      global.mockGitHubContext.context.eventName = 'pull_request';\r\n      global.mockGitHubContext.context.payload = {\r\n        pull_request: { number: 456 }\r\n      };\r\n\r\n      const results = global.testUtils.createMockProcessedResults({\r\n        criticalCount: 3,\r\n        scanStatus: 'failure'\r\n      });\r\n\r\n      // Act\r\n      await addPRComment('test-token', results, 'vulnerable:image');\r\n\r\n      // Assert\r\n      const octokit = global.mockGitHubContext.getOctokit();\r\n      const call = octokit.rest.issues.createComment.mock.calls[0];\r\n      const comment = call[0].body;\r\n      \r\n      expect(comment).toContain('⚠️ **Critical vulnerabilities detected!**');\r\n      expect(comment).toContain('🔴 Critical | 3');\r\n    });\r\n\r\n    test('취약점이 없을 때 축하 메시지를 포함한다', async () => {\r\n      // Arrange\r\n      global.mockGitHubContext.context.eventName = 'pull_request';\r\n      global.mockGitHubContext.context.payload = {\r\n        pull_request: { number: 789 }\r\n      };\r\n\r\n      const results = global.testUtils.createMockProcessedResults({\r\n        vulnerabilityCount: 0,\r\n        criticalCount: 0,\r\n        highCount: 0,\r\n        mediumCount: 0,\r\n        lowCount: 0,\r\n        scanStatus: 'success'\r\n      });\r\n\r\n      // Act\r\n      await addPRComment('test-token', results, 'secure:image');\r\n\r\n      // Assert\r\n      const octokit = global.mockGitHubContext.getOctokit();\r\n      const call = octokit.rest.issues.createComment.mock.calls[0];\r\n      const comment = call[0].body;\r\n      \r\n      expect(comment).toContain('🎉 No vulnerabilities found! Your image is secure.');\r\n    });\r\n\r\n    test('GitHub API 오류 시 경고를 출력한다', async () => {\r\n      // Arrange\r\n      global.mockGitHubContext.context.eventName = 'pull_request';\r\n      global.mockGitHubContext.getOctokit().rest.issues.createComment\r\n        .mockRejectedValueOnce(new Error('API Error'));\r\n\r\n      // Act\r\n      await addPRComment('test-token', {}, 'test:image');\r\n\r\n      // Assert\r\n      expect(global.mockCore.warning).toHaveBeenCalledWith(\r\n        expect.stringContaining('Failed to add PR comment')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('🔄 통합 테스트', () => {\r\n    test('전체 워크플로우가 올바르게 작동한다', async () => {\r\n      // 이 테스트는 실제 run() 함수가 export된 경우에만 실행\r\n      if (!moduleUnderTest.run) {\r\n        console.log('ℹ️ Skipping integration test - run function not exported');\r\n        return;\r\n      }\r\n\r\n      // Arrange\r\n      global.mockCore.getInput.mockImplementation((name) => {\r\n        const inputs = {\r\n          'image': 'nginx:latest',\r\n          'severity-threshold': 'HIGH',\r\n          'fail-on-critical': 'false'\r\n        };\r\n        return inputs[name] || '';\r\n      });\r\n\r\n      const mockScanResults = global.testUtils.createMockScanResults();\r\n      global.mockFs.readFileSync.mockReturnValue(JSON.stringify(mockScanResults));\r\n\r\n      // Act\r\n      await moduleUnderTest.run();\r\n\r\n      // Assert\r\n      expect(global.mockCore.info).toHaveBeenCalledWith('🏰 GnFortress Docker Security Scanner');\r\n      expect(global.mockCore.setOutput).toHaveBeenCalledWith('scan-status', expect.any(String));\r\n    });\r\n\r\n    test('에러 상황에서 적절히 실패한다', async () => {\r\n      // 이 테스트는 실제 run() 함수가 export된 경우에만 실행\r\n      if (!moduleUnderTest.run) {\r\n        console.log('ℹ️ Skipping error integration test - run function not exported');\r\n        return;\r\n      }\r\n\r\n      // Arrange\r\n      global.setupErrorMocks();\r\n\r\n      // Act\r\n      await moduleUnderTest.run();\r\n\r\n      // Assert\r\n      expect(global.mockCore.setFailed).toHaveBeenCalledWith(\r\n        expect.stringContaining('Action failed with error')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('🎯 엣지 케이스 테스트', () => {\r\n    test('빈 이미지 이름 처리', async () => {\r\n      // 실제 함수가 있을 때만 테스트\r\n      if (pullDockerImage) {\r\n        await global.testUtils.expectAsyncError(\r\n          () => pullDockerImage(''),\r\n          'image'\r\n        );\r\n      }\r\n    });\r\n\r\n    test('네트워크 타임아웃 처리', async () => {\r\n      // Arrange\r\n      const timeoutError = new Error('Request timeout');\r\n      timeoutError.code = 'ECONNABORTED';\r\n      global.mockAxios.get.mockRejectedValueOnce(timeoutError);\r\n\r\n      // Act & Assert\r\n      if (getLatestTrivyVersion) {\r\n        const version = await getLatestTrivyVersion();\r\n        expect(version).toBe('0.49.1'); // 기본값 반환\r\n      }\r\n    });\r\n\r\n    test('메모리 부족 상황 시뮬레이션', async () => {\r\n      // Arrange\r\n      const memoryError = new Error('JavaScript heap out of memory');\r\n      global.mockFs.readFileSync.mockImplementationOnce(() => {\r\n        throw memoryError;\r\n      });\r\n\r\n      // Act & Assert\r\n      if (runTrivyScan) {\r\n        await global.testUtils.expectAsyncError(\r\n          () => runTrivyScan('large:image', 'LOW', 'json', true),\r\n          'heap out of memory'\r\n        );\r\n      }\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}