2af440198f49e0784e25bf70e28ddd40
/**
 * GnFortress Docker Security Scanner 테스트
 * setup.js에서 제공하는 mock과 유틸리티를 활용
 */

// Jest mock은 setup.js에서 처리되므로 여기서는 모듈만 import
const core = require('@actions/core');
const github = require('@actions/github');
const exec = require('@actions/exec');
const fs = require('fs');
const axios = require('axios');

// 실제 모듈은 테스트 환경에서만 export되므로 조건부 import
let moduleUnderTest;
try {
  moduleUnderTest = require('../src/index');
} catch (error) {
  console.warn('⚠️ Could not import module under test. Make sure to add exports to src/index.js');
  moduleUnderTest = {};
}
const {
  installTrivy,
  getLatestTrivyVersion,
  pullDockerImage,
  runTrivyScan,
  processScanResults,
  sendSlackNotification,
  addPRComment
} = moduleUnderTest;
describe('🏰 GnFortress Docker Security Scanner', () => {
  // setup.js에서 beforeEach로 자동 초기화되므로 추가 설정만 필요시 사용
  beforeEach(() => {
    // 테스트별 특별한 설정이 있다면 여기에 추가
  });
  describe('🚀 getLatestTrivyVersion', () => {
    test('최신 Trivy 버전을 성공적으로 가져온다', async () => {
      // Arrange - setup.js의 testUtils 활용
      const expectedVersion = '0.49.1';
      global.mockAxios.get.mockResolvedValueOnce({
        data: {
          tag_name: `v${expectedVersion}`
        },
        status: 200
      });

      // Act
      const version = await getLatestTrivyVersion();

      // Assert
      expect(version).toBe(expectedVersion);
      expect(global.mockAxios.get).toHaveBeenCalledWith('https://api.github.com/repos/aquasecurity/trivy/releases/latest', {
        headers: {
          'User-Agent': 'GnFortress-Docker-Scanner'
        }
      });
    });
    test('API 호출 실패 시 기본값을 반환한다', async () => {
      // Arrange
      global.mockAxios.get.mockRejectedValueOnce(new Error('Network error'));

      // Act
      const version = await getLatestTrivyVersion();

      // Assert
      expect(version).toBe('0.49.1');
      expect(global.mockCore.warning).toHaveBeenCalledWith(expect.stringContaining('Failed to get latest Trivy version'));
    });
    test('빈 응답 처리', async () => {
      // Arrange
      global.mockAxios.get.mockResolvedValueOnce({
        data: {},
        status: 200
      });

      // Act
      const version = await getLatestTrivyVersion();

      // Assert
      expect(version).toBe('0.49.1'); // 기본값 반환
    });
  });
  describe('🔧 installTrivy', () => {
    test('Trivy가 이미 설치되어 있으면 설치를 건너뛴다', async () => {
      // Arrange
      global.mockExec.exec.mockResolvedValueOnce(0); // trivy version 명령 성공

      // Act
      await installTrivy();

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', ['version'], {
        silent: true
      });
      expect(global.mockCore.info).toHaveBeenCalledWith('✅ Trivy is already installed');
    });
    test('Linux에서 Trivy를 성공적으로 설치한다', async () => {
      // Arrange
      Object.defineProperty(process, 'platform', {
        value: 'linux',
        writable: true,
        configurable: true
      });
      Object.defineProperty(process, 'arch', {
        value: 'x64',
        writable: true,
        configurable: true
      });
      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found')) // 첫 번째 호출은 실패
      .mockResolvedValue(0); // 나머지 호출은 성공

      global.mockAxios.get.mockResolvedValueOnce({
        data: {
          tag_name: 'v0.49.1'
        }
      });

      // Act
      await installTrivy('latest');

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('curl', ['-L', '-o', 'trivy_0.49.1_Linux-amd64.tar.gz', 'https://github.com/aquasecurity/trivy/releases/download/v0.49.1/trivy_0.49.1_Linux-amd64.tar.gz']);
      expect(global.mockExec.exec).toHaveBeenCalledWith('tar', ['-xzf', 'trivy_0.49.1_Linux-amd64.tar.gz']);
    });
    test('macOS에서 Trivy를 성공적으로 설치한다', async () => {
      // Arrange
      Object.defineProperty(process, 'platform', {
        value: 'darwin',
        writable: true,
        configurable: true
      });
      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found'));
      global.mockAxios.get.mockResolvedValueOnce({
        data: {
          tag_name: 'v0.49.1'
        }
      });

      // Act
      await installTrivy();

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('curl', expect.arrayContaining([expect.stringContaining('trivy_0.49.1_macOS-amd64.tar.gz')]));
    });
    test('지원되지 않는 플랫폼에서 에러를 던진다', async () => {
      // Arrange
      Object.defineProperty(process, 'platform', {
        value: 'win32',
        writable: true,
        configurable: true
      });
      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found'));

      // Act & Assert - setup.js의 헬퍼 사용
      await global.testUtils.expectAsyncError(() => installTrivy(), 'Unsupported platform: win32');
    });
    test('특정 버전으로 설치한다', async () => {
      // Arrange
      const specificVersion = '0.48.0';
      global.mockExec.exec.mockRejectedValueOnce(new Error('trivy not found'));

      // Act
      await installTrivy(specificVersion);

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('curl', expect.arrayContaining([expect.stringContaining(`trivy_${specificVersion}_`)]));
    });
  });
  describe('🐳 pullDockerImage', () => {
    test('Docker 이미지를 성공적으로 pull한다', async () => {
      // Arrange
      const image = 'nginx:latest';
      global.mockExec.exec.mockResolvedValueOnce(0);

      // Act
      await pullDockerImage(image);

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('docker', ['pull', image]);
      expect(global.mockCore.info).toHaveBeenCalledWith(`✅ Successfully pulled image: ${image}`);
    });
    test('Docker pull 실패 시 경고를 출력하고 계속 진행한다', async () => {
      // Arrange
      const image = 'nonexistent:latest';
      global.mockExec.exec.mockRejectedValueOnce(new Error('Pull failed'));

      // Act
      await pullDockerImage(image);

      // Assert
      expect(global.mockCore.warning).toHaveBeenCalledWith(expect.stringContaining(`Failed to pull image ${image}`));
      expect(global.mockCore.info).toHaveBeenCalledWith('ℹ️ Continuing with scan - image might already exist locally');
    });
    test('다양한 이미지 형식을 처리한다', async () => {
      // Arrange
      const images = ['nginx', 'nginx:1.21', 'gcr.io/project/image:tag', 'registry.hub.docker.com/library/ubuntu:20.04'];

      // Act & Assert
      for (const image of images) {
        global.setupMocks(); // 각 테스트마다 mock 초기화
        await pullDockerImage(image);
        expect(global.mockExec.exec).toHaveBeenCalledWith('docker', ['pull', image]);
      }
    });
  });
  describe('🔍 runTrivyScan', () => {
    test('Trivy 스캔을 성공적으로 실행한다', async () => {
      // Arrange
      const mockResults = global.testUtils.createMockScanResults();
      global.mockExec.exec.mockResolvedValue(0);
      global.mockFs.readFileSync.mockReturnValue(JSON.stringify(mockResults));

      // Act
      const results = await runTrivyScan('nginx:latest', 'MEDIUM', 'json', true);

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', ['image', '--format', 'json', '--output', 'trivy-results.json', '--severity', 'MEDIUM', '--quiet', '--exit-code', '0', 'nginx:latest']);
      expect(results).toEqual(mockResults);
    });
    test('캐시가 비활성화된 상태로 스캔을 실행한다', async () => {
      // Arrange
      global.mockExec.exec.mockResolvedValue(0);
      global.mockFs.readFileSync.mockReturnValue('{"Results": []}');

      // Act
      await runTrivyScan('nginx:latest', 'HIGH', 'json', false);

      // Assert
      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', expect.arrayContaining(['--no-cache']));
    });
    test('다른 출력 형식으로 추가 파일을 생성한다', async () => {
      // Arrange
      global.mockExec.exec.mockResolvedValue(0);
      global.mockFs.readFileSync.mockReturnValue('{"Results": []}');

      // Act
      await runTrivyScan('nginx:latest', 'HIGH', 'table', true);

      // Assert
      // JSON 형식으로 한 번, table 형식으로 한 번 더 실행되어야 함
      expect(global.mockExec.exec).toHaveBeenCalledTimes(2);
      expect(global.mockExec.exec).toHaveBeenCalledWith('trivy', expect.arrayContaining(['--format', 'table']));
    });
    test('스캔 실패 시 적절한 에러를 던진다', async () => {
      // Arrange
      global.setupErrorMocks();

      // Act & Assert
      await global.testUtils.expectAsyncError(() => runTrivyScan('invalid:image', 'HIGH', 'json', true), 'Trivy scan failed');
    });
  });
  describe('📊 processScanResults', () => {
    test('스캔 결과를 올바르게 처리한다', async () => {
      // Arrange
      const mockScanResults = global.testUtils.createMockScanResults({
        Results: [{
          Vulnerabilities: [{
            Severity: 'CRITICAL'
          }, {
            Severity: 'HIGH'
          }, {
            Severity: 'MEDIUM'
          }, {
            Severity: 'LOW'
          }]
        }]
      });

      // Act
      const results = await processScanResults(mockScanResults, 'MEDIUM');

      // Assert
      expect(results).toEqual({
        vulnerabilityCount: 4,
        criticalCount: 1,
        highCount: 1,
        mediumCount: 1,
        lowCount: 1,
        scanStatus: 'failure',
        // critical이 있으므로 failure
        scanTimestamp: expect.any(String),
        detailedResults: mockScanResults,
        reportPath: 'trivy-results.json'
      });
    });
    test('취약점이 없을 때 성공 상태를 반환한다', async () => {
      // Arrange
      const mockScanResults = {
        Results: []
      };

      // Act
      const results = await processScanResults(mockScanResults, 'MEDIUM');

      // Assert
      expect(results.scanStatus).toBe('success');
      expect(results.vulnerabilityCount).toBe(0);
      expect(results.criticalCount).toBe(0);
    });
    test('High 취약점만 있을 때 warning 상태를 반환한다', async () => {
      // Arrange
      const mockScanResults = {
        Results: [{
          Vulnerabilities: [{
            Severity: 'HIGH'
          }, {
            Severity: 'MEDIUM'
          }]
        }]
      };

      // Act
      const results = await processScanResults(mockScanResults, 'MEDIUM');

      // Assert
      expect(results.scanStatus).toBe('warning');
      expect(results.highCount).toBe(1);
      expect(results.criticalCount).toBe(0);
    });
    test('복잡한 스캔 결과를 처리한다', async () => {
      // Arrange
      const complexResults = {
        Results: [{
          Vulnerabilities: [{
            Severity: 'CRITICAL'
          }, {
            Severity: 'CRITICAL'
          }]
        }, {
          Vulnerabilities: [{
            Severity: 'HIGH'
          }, {
            Severity: 'MEDIUM'
          }, {
            Severity: 'LOW'
          }]
        }]
      };

      // Act
      const results = await processScanResults(complexResults, 'LOW');

      // Assert
      expect(results.vulnerabilityCount).toBe(5);
      expect(results.criticalCount).toBe(2);
      expect(results.highCount).toBe(1);
      expect(results.mediumCount).toBe(1);
      expect(results.lowCount).toBe(1);
    });
    test('잘못된 스캔 결과 형식을 처리한다', async () => {
      // Act & Assert
      await global.testUtils.expectAsyncError(() => processScanResults(null, 'MEDIUM'), 'Failed to process scan results');
    });
  });
  describe('📱 sendSlackNotification', () => {
    test('성공 상태의 Slack 알림을 전송한다', async () => {
      // Arrange
      const webhookUrl = 'https://hooks.slack.com/test';
      const results = global.testUtils.createMockProcessedResults({
        scanStatus: 'success',
        vulnerabilityCount: 0,
        criticalCount: 0
      });
      const imageName = 'nginx:latest';
      global.mockAxios.post.mockResolvedValueOnce({
        status: 200
      });

      // Act
      await sendSlackNotification(webhookUrl, results, imageName);

      // Assert
      expect(global.mockAxios.post).toHaveBeenCalledWith(webhookUrl, expect.objectContaining({
        username: 'GnFortress Security Scanner',
        icon_emoji: ':shield:',
        attachments: expect.arrayContaining([expect.objectContaining({
          color: 'good',
          title: '✅ Docker Security Scan Results'
        })])
      }), expect.objectContaining({
        headers: {
          'Content-Type': 'application/json'
        }
      }));
      expect(global.mockCore.info).toHaveBeenCalledWith('✅ Slack notification sent successfully');
    });
    test('경고 상태의 Slack 알림을 전송한다', async () => {
      // Arrange
      const results = global.testUtils.createMockProcessedResults({
        scanStatus: 'warning'
      });

      // Act
      await sendSlackNotification('https://hooks.slack.com/test', results, 'test:latest');

      // Assert
      const call = global.mockAxios.post.mock.calls[0];
      const payload = call[1];
      expect(payload.attachments[0].color).toBe('warning');
      expect(payload.attachments[0].title).toBe('⚠️ Docker Security Scan Results');
    });
    test('실패 상태의 Slack 알림을 전송한다', async () => {
      // Arrange
      const results = global.testUtils.createMockProcessedResults({
        scanStatus: 'failure',
        criticalCount: 5
      });

      // Act
      await sendSlackNotification('https://hooks.slack.com/test', results, 'vulnerable:image');

      // Assert
      const call = global.mockAxios.post.mock.calls[0];
      const payload = call[1];
      expect(payload.attachments[0].color).toBe('danger');
      expect(payload.attachments[0].title).toBe('❌ Docker Security Scan Results');
    });
    test('Slack 알림 전송 실패 시 경고를 출력한다', async () => {
      // Arrange
      global.mockAxios.post.mockRejectedValueOnce(new Error('Network error'));

      // Act
      await sendSlackNotification('invalid-url', {}, 'test:latest');

      // Assert
      expect(global.mockCore.warning).toHaveBeenCalledWith(expect.stringContaining('Failed to send Slack notification'));
    });
  });
  describe('💬 addPRComment', () => {
    test('PR 이벤트에서 댓글을 성공적으로 추가한다', async () => {
      // Arrange
      global.mockGitHubContext.context.eventName = 'pull_request';
      global.mockGitHubContext.context.payload = {
        pull_request: {
          number: 123
        }
      };
      const results = global.testUtils.createMockProcessedResults();

      // Act
      await addPRComment('test-token', results, 'nginx:latest');

      // Assert
      expect(global.mockGitHubContext.getOctokit).toHaveBeenCalledWith('test-token');
      const octokit = global.mockGitHubContext.getOctokit();
      expect(octokit.rest.issues.createComment).toHaveBeenCalledWith({
        owner: 'gnfortress',
        repo: 'docker-security-scanner',
        issue_number: 123,
        body: expect.stringContaining('Docker Security Scan Results')
      });
      expect(global.mockCore.info).toHaveBeenCalledWith('✅ PR comment added successfully');
    });
    test('PR 이벤트가 아닐 때 댓글 추가를 건너뛴다', async () => {
      // Arrange
      global.mockGitHubContext.context.eventName = 'push';

      // Act
      await addPRComment('test-token', {}, 'nginx:latest');

      // Assert
      expect(global.mockCore.info).toHaveBeenCalledWith('ℹ️ Not a pull request event, skipping PR comment');
    });
    test('Critical 취약점이 있을 때 경고 메시지를 포함한다', async () => {
      // Arrange
      global.mockGitHubContext.context.eventName = 'pull_request';
      global.mockGitHubContext.context.payload = {
        pull_request: {
          number: 456
        }
      };
      const results = global.testUtils.createMockProcessedResults({
        criticalCount: 3,
        scanStatus: 'failure'
      });

      // Act
      await addPRComment('test-token', results, 'vulnerable:image');

      // Assert
      const octokit = global.mockGitHubContext.getOctokit();
      const call = octokit.rest.issues.createComment.mock.calls[0];
      const comment = call[0].body;
      expect(comment).toContain('⚠️ **Critical vulnerabilities detected!**');
      expect(comment).toContain('🔴 Critical | 3');
    });
    test('취약점이 없을 때 축하 메시지를 포함한다', async () => {
      // Arrange
      global.mockGitHubContext.context.eventName = 'pull_request';
      global.mockGitHubContext.context.payload = {
        pull_request: {
          number: 789
        }
      };
      const results = global.testUtils.createMockProcessedResults({
        vulnerabilityCount: 0,
        criticalCount: 0,
        highCount: 0,
        mediumCount: 0,
        lowCount: 0,
        scanStatus: 'success'
      });

      // Act
      await addPRComment('test-token', results, 'secure:image');

      // Assert
      const octokit = global.mockGitHubContext.getOctokit();
      const call = octokit.rest.issues.createComment.mock.calls[0];
      const comment = call[0].body;
      expect(comment).toContain('🎉 No vulnerabilities found! Your image is secure.');
    });
    test('GitHub API 오류 시 경고를 출력한다', async () => {
      // Arrange
      global.mockGitHubContext.context.eventName = 'pull_request';
      global.mockGitHubContext.getOctokit().rest.issues.createComment.mockRejectedValueOnce(new Error('API Error'));

      // Act
      await addPRComment('test-token', {}, 'test:image');

      // Assert
      expect(global.mockCore.warning).toHaveBeenCalledWith(expect.stringContaining('Failed to add PR comment'));
    });
  });
  describe('🔄 통합 테스트', () => {
    test('전체 워크플로우가 올바르게 작동한다', async () => {
      // 이 테스트는 실제 run() 함수가 export된 경우에만 실행
      if (!moduleUnderTest.run) {
        console.log('ℹ️ Skipping integration test - run function not exported');
        return;
      }

      // Arrange
      global.mockCore.getInput.mockImplementation(name => {
        const inputs = {
          'image': 'nginx:latest',
          'severity-threshold': 'HIGH',
          'fail-on-critical': 'false'
        };
        return inputs[name] || '';
      });
      const mockScanResults = global.testUtils.createMockScanResults();
      global.mockFs.readFileSync.mockReturnValue(JSON.stringify(mockScanResults));

      // Act
      await moduleUnderTest.run();

      // Assert
      expect(global.mockCore.info).toHaveBeenCalledWith('🏰 GnFortress Docker Security Scanner');
      expect(global.mockCore.setOutput).toHaveBeenCalledWith('scan-status', expect.any(String));
    });
    test('에러 상황에서 적절히 실패한다', async () => {
      // 이 테스트는 실제 run() 함수가 export된 경우에만 실행
      if (!moduleUnderTest.run) {
        console.log('ℹ️ Skipping error integration test - run function not exported');
        return;
      }

      // Arrange
      global.setupErrorMocks();

      // Act
      await moduleUnderTest.run();

      // Assert
      expect(global.mockCore.setFailed).toHaveBeenCalledWith(expect.stringContaining('Action failed with error'));
    });
  });
  describe('🎯 엣지 케이스 테스트', () => {
    test('빈 이미지 이름 처리', async () => {
      // 실제 함수가 있을 때만 테스트
      if (pullDockerImage) {
        await global.testUtils.expectAsyncError(() => pullDockerImage(''), 'image');
      }
    });
    test('네트워크 타임아웃 처리', async () => {
      // Arrange
      const timeoutError = new Error('Request timeout');
      timeoutError.code = 'ECONNABORTED';
      global.mockAxios.get.mockRejectedValueOnce(timeoutError);

      // Act & Assert
      if (getLatestTrivyVersion) {
        const version = await getLatestTrivyVersion();
        expect(version).toBe('0.49.1'); // 기본값 반환
      }
    });
    test('메모리 부족 상황 시뮬레이션', async () => {
      // Arrange
      const memoryError = new Error('JavaScript heap out of memory');
      global.mockFs.readFileSync.mockImplementationOnce(() => {
        throw memoryError;
      });

      // Act & Assert
      if (runTrivyScan) {
        await global.testUtils.expectAsyncError(() => runTrivyScan('large:image', 'LOW', 'json', true), 'heap out of memory');
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,