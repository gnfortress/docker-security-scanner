{"version":3,"names":["core","require","github","exec","fs","path","axios","run","info","image","getInput","required","slackWebhook","githubToken","severityThreshold","failOnCritical","outputFormat","trivyVersion","cacheEnabled","installTrivy","pullDockerImage","scanResults","runTrivyScan","processedResults","processScanResults","setOutput","JSON","stringify","vulnerabilityCount","toString","criticalCount","highCount","mediumCount","lowCount","scanStatus","reportPath","reportUrl","context","serverUrl","repo","owner","runId","sendSlackNotification","eventName","addPRComment","setFailed","error","message","version","silent","os","process","platform","arch","downloadUrl","fileName","latestVersion","getLatestTrivyVersion","Error","response","get","headers","data","tag_name","replace","warning","threshold","format","outputFile","args","push","resultsJson","readFileSync","results","parse","formatOutputFile","formatArgs","Results","result","Vulnerabilities","vuln","Severity","scanTimestamp","Date","toISOString","detailedResults","webhookUrl","imageName","statusEmoji","colorMap","emoji","color","payload","username","icon_emoji","attachments","title","fields","value","short","toUpperCase","footer","ts","Math","floor","now","post","token","octokit","getOctokit","comment","rest","issues","createComment","issue_number","pull_request","number","body","env","NODE_ENV","module","exports"],"sources":["index.js"],"sourcesContent":["const core = require('@actions/core');\r\nconst github = require('@actions/github');\r\nconst exec = require('@actions/exec');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst axios = require('axios');\r\n\r\nasync function run() {\r\n  try {\r\n    // 🏰 GnFortress 브랜딩\r\n    core.info('🏰 GnFortress Docker Security Scanner');\r\n    core.info('⚡ Enterprise-grade security scanning in 5 minutes');\r\n    core.info('');\r\n\r\n    // 입력 파라미터 가져오기\r\n    const image = core.getInput('image', { required: true });\r\n    const slackWebhook = core.getInput('slack-webhook');\r\n    const githubToken = core.getInput('github-token');\r\n    const severityThreshold = core.getInput('severity-threshold') || 'MEDIUM';\r\n    const failOnCritical = core.getInput('fail-on-critical') === 'true';\r\n    const outputFormat = core.getInput('output-format') || 'table';\r\n    const trivyVersion = core.getInput('trivy-version') || 'latest';\r\n    const cacheEnabled = core.getInput('cache-enabled') !== 'false';\r\n    \r\n    core.info(`🔍 Scanning Docker image: ${image}`);\r\n    core.info(`📊 Severity threshold: ${severityThreshold}`);\r\n    core.info(`⚙️  Output format: ${outputFormat}`);\r\n    core.info(`🔧 Trivy version: ${trivyVersion}`);\r\n    core.info(`💾 Cache enabled: ${cacheEnabled}`);\r\n    core.info('');\r\n\r\n    // Trivy 설치\r\n    core.info('🚀 Installing Trivy scanner...');\r\n    await installTrivy(trivyVersion);\r\n    \r\n    // Docker 이미지 pull (필요한 경우)\r\n    core.info(`📥 Pulling Docker image: ${image}`);\r\n    await pullDockerImage(image);\r\n    \r\n    // 보안 스캔 실행\r\n    core.info('🔍 Running security scan...');\r\n    const scanResults = await runTrivyScan(image, severityThreshold, outputFormat, cacheEnabled);\r\n    \r\n    // 스캔 결과 처리\r\n    core.info('📊 Processing scan results...');\r\n    const processedResults = await processScanResults(scanResults, severityThreshold);\r\n    \r\n    // 결과 출력 설정\r\n    core.setOutput('scan-result', JSON.stringify(processedResults));\r\n    core.setOutput('vulnerability-count', processedResults.vulnerabilityCount.toString());\r\n    core.setOutput('critical-count', processedResults.criticalCount.toString());\r\n    core.setOutput('high-count', processedResults.highCount.toString());\r\n    core.setOutput('medium-count', processedResults.mediumCount.toString());\r\n    core.setOutput('low-count', processedResults.lowCount.toString());\r\n    core.setOutput('scan-status', processedResults.scanStatus);\r\n    \r\n    // 리포트 파일이 생성되었다면 URL 설정\r\n    if (processedResults.reportPath) {\r\n      const reportUrl = `${github.context.serverUrl}/${github.context.repo.owner}/${github.context.repo.repo}/actions/runs/${github.context.runId}`;\r\n      core.setOutput('report-url', reportUrl);\r\n    }\r\n    \r\n    // Slack 알림 전송\r\n    if (slackWebhook) {\r\n      core.info('📱 Sending Slack notification...');\r\n      await sendSlackNotification(slackWebhook, processedResults, image);\r\n    }\r\n    \r\n    // GitHub PR 코멘트 추가\r\n    if (githubToken && github.context.eventName === 'pull_request') {\r\n      core.info('💬 Adding PR comment...');\r\n      await addPRComment(githubToken, processedResults, image);\r\n    }\r\n\r\n    // 결과 출력\r\n    core.info('');\r\n    core.info('✅ Security scan completed successfully!');\r\n    core.info(`📊 Found ${processedResults.vulnerabilityCount} vulnerabilities:`);\r\n    core.info(`   🔴 Critical: ${processedResults.criticalCount}`);\r\n    core.info(`   🟠 High: ${processedResults.highCount}`);\r\n    core.info(`   🟡 Medium: ${processedResults.mediumCount}`);\r\n    core.info(`   🟢 Low: ${processedResults.lowCount}`);\r\n    core.info('');\r\n    core.info('🏰 Powered by GnFortress - Enterprise Cloud Security');\r\n    \r\n    // Critical 취약점이 있고 fail-on-critical이 true인 경우 실패 처리\r\n    if (failOnCritical && processedResults.criticalCount > 0) {\r\n      core.setFailed(`❌ Critical vulnerabilities found: ${processedResults.criticalCount}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    core.setFailed(`❌ Action failed with error: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Trivy 설치 함수\r\nasync function installTrivy(version = 'latest') {\r\n  try {\r\n    // Trivy가 이미 설치되어 있는지 확인\r\n    try {\r\n      await exec.exec('trivy', ['version'], { silent: true });\r\n      core.info('✅ Trivy is already installed');\r\n      return;\r\n    } catch {\r\n      // Trivy가 설치되어 있지 않음, 설치 진행\r\n    }\r\n\r\n    const os = process.platform;\r\n    const arch = process.arch === 'x64' ? 'amd64' : process.arch;\r\n    \r\n    let downloadUrl;\r\n    let fileName;\r\n    \r\n    if (version === 'latest') {\r\n      // GitHub releases API에서 최신 버전 가져오기\r\n      const latestVersion = await getLatestTrivyVersion();\r\n      version = latestVersion;\r\n    }\r\n    \r\n    if (os === 'linux') {\r\n      fileName = `trivy_${version}_Linux-${arch}.tar.gz`;\r\n      downloadUrl = `https://github.com/aquasecurity/trivy/releases/download/v${version}/${fileName}`;\r\n    } else if (os === 'darwin') {\r\n      fileName = `trivy_${version}_macOS-${arch}.tar.gz`;\r\n      downloadUrl = `https://github.com/aquasecurity/trivy/releases/download/v${version}/${fileName}`;\r\n    } else {\r\n      throw new Error(`Unsupported platform: ${os}`);\r\n    }\r\n\r\n    core.info(`📥 Downloading Trivy ${version} for ${os}-${arch}...`);\r\n    \r\n    // Trivy 다운로드\r\n    await exec.exec('curl', ['-L', '-o', fileName, downloadUrl]);\r\n    \r\n    // 압축 해제\r\n    await exec.exec('tar', ['-xzf', fileName]);\r\n    \r\n    // 실행 권한 부여 및 PATH에 추가\r\n    await exec.exec('chmod', ['+x', 'trivy']);\r\n    await exec.exec('sudo', ['mv', 'trivy', '/usr/local/bin/']);\r\n    \r\n    // 정리\r\n    await exec.exec('rm', ['-f', fileName]);\r\n    \r\n    core.info('✅ Trivy installation completed');\r\n    \r\n    // 설치 확인\r\n    await exec.exec('trivy', ['version']);\r\n    \r\n  } catch (error) {\r\n    throw new Error(`Failed to install Trivy: ${error.message}`);\r\n  }\r\n}\r\n\r\n// 최신 Trivy 버전 가져오기\r\nasync function getLatestTrivyVersion() {\r\n  try {\r\n    const response = await axios.get('https://api.github.com/repos/aquasecurity/trivy/releases/latest', {\r\n      headers: {\r\n        'User-Agent': 'GnFortress-Docker-Scanner'\r\n      }\r\n    });\r\n    \r\n    const version = response.data.tag_name.replace(/^v/, '');\r\n    return version;\r\n  } catch (error) {\r\n    core.warning(`⚠️ Failed to get latest Trivy version: ${error.message}`);\r\n    return '0.49.1'; // 안전한 기본값\r\n  }\r\n}\r\n\r\n// Docker 이미지 pull\r\nasync function pullDockerImage(image) {\r\n  try {\r\n    await exec.exec('docker', ['pull', image]);\r\n    core.info(`✅ Successfully pulled image: ${image}`);\r\n  } catch (error) {\r\n    core.warning(`⚠️ Failed to pull image ${image}: ${error.message}`);\r\n    core.info('ℹ️ Continuing with scan - image might already exist locally');\r\n  }\r\n}\r\n\r\n// Trivy 스캔 실행\r\nasync function runTrivyScan(image, threshold, format, cacheEnabled) {\r\n  try {\r\n    const outputFile = 'trivy-results.json';\r\n    const args = [\r\n      'image',\r\n      '--format', 'json',\r\n      '--output', outputFile,\r\n      '--severity', threshold\r\n    ];\r\n    \r\n    if (!cacheEnabled) {\r\n      args.push('--no-cache');\r\n    }\r\n    \r\n    // 추가 스캔 옵션\r\n    args.push('--quiet');\r\n    args.push('--exit-code', '0'); // 취약점이 발견되어도 exit code 0으로 설정\r\n    \r\n    args.push(image);\r\n    \r\n    await exec.exec('trivy', args);\r\n    \r\n    // 결과 파일 읽기\r\n    const resultsJson = fs.readFileSync(outputFile, 'utf8');\r\n    const results = JSON.parse(resultsJson);\r\n    \r\n    // 추가 포맷으로 결과 생성 (table, sarif 등)\r\n    if (format !== 'json') {\r\n      const formatOutputFile = `trivy-results.${format}`;\r\n      const formatArgs = [\r\n        'image',\r\n        '--format', format,\r\n        '--output', formatOutputFile,\r\n        '--severity', threshold,\r\n        '--quiet',\r\n        image\r\n      ];\r\n      \r\n      await exec.exec('trivy', formatArgs);\r\n    }\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    throw new Error(`Trivy scan failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// 스캔 결과 처리\r\nasync function processScanResults(scanResults, threshold) {\r\n  try {\r\n    let vulnerabilityCount = 0;\r\n    let criticalCount = 0;\r\n    let highCount = 0;\r\n    let mediumCount = 0;\r\n    let lowCount = 0;\r\n    let scanStatus = 'success';\r\n    \r\n    // Trivy 결과 구조 분석\r\n    if (scanResults && scanResults.Results) {\r\n      for (const result of scanResults.Results) {\r\n        if (result.Vulnerabilities) {\r\n          for (const vuln of result.Vulnerabilities) {\r\n            vulnerabilityCount++;\r\n            \r\n            switch (vuln.Severity) {\r\n              case 'CRITICAL':\r\n                criticalCount++;\r\n                break;\r\n              case 'HIGH':\r\n                highCount++;\r\n                break;\r\n              case 'MEDIUM':\r\n                mediumCount++;\r\n                break;\r\n              case 'LOW':\r\n                lowCount++;\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 스캔 상태 결정\r\n    if (criticalCount > 0) {\r\n      scanStatus = 'failure';\r\n    } else if (highCount > 0) {\r\n      scanStatus = 'warning';\r\n    }\r\n    \r\n    // 상세 정보 추가\r\n    const processedResults = {\r\n      vulnerabilityCount,\r\n      criticalCount,\r\n      highCount,\r\n      mediumCount,\r\n      lowCount,\r\n      scanStatus,\r\n      scanTimestamp: new Date().toISOString(),\r\n      detailedResults: scanResults,\r\n      reportPath: 'trivy-results.json'\r\n    };\r\n    \r\n    // 결과 요약 로그\r\n    core.info(`📊 Scan Summary:`);\r\n    core.info(`   Total vulnerabilities: ${vulnerabilityCount}`);\r\n    core.info(`   Critical: ${criticalCount}`);\r\n    core.info(`   High: ${highCount}`);\r\n    core.info(`   Medium: ${mediumCount}`);\r\n    core.info(`   Low: ${lowCount}`);\r\n    \r\n    return processedResults;\r\n    \r\n  } catch (error) {\r\n    throw new Error(`Failed to process scan results: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Slack 알림 전송\r\nasync function sendSlackNotification(webhookUrl, results, imageName) {\r\n  try {\r\n    const statusEmoji = {\r\n      'success': '✅',\r\n      'warning': '⚠️',\r\n      'failure': '❌'\r\n    };\r\n    \r\n    const colorMap = {\r\n      'success': 'good',\r\n      'warning': 'warning', \r\n      'failure': 'danger'\r\n    };\r\n    \r\n    const emoji = statusEmoji[results.scanStatus] || '📊';\r\n    const color = colorMap[results.scanStatus] || 'good';\r\n    \r\n    const payload = {\r\n      username: 'GnFortress Security Scanner',\r\n      icon_emoji: ':shield:',\r\n      attachments: [{\r\n        color: color,\r\n        title: `${emoji} Docker Security Scan Results`,\r\n        fields: [\r\n          {\r\n            title: 'Image',\r\n            value: imageName,\r\n            short: true\r\n          },\r\n          {\r\n            title: 'Status',\r\n            value: results.scanStatus.toUpperCase(),\r\n            short: true\r\n          },\r\n          {\r\n            title: 'Total Vulnerabilities',\r\n            value: results.vulnerabilityCount.toString(),\r\n            short: true\r\n          },\r\n          {\r\n            title: 'Critical',\r\n            value: `🔴 ${results.criticalCount}`,\r\n            short: true\r\n          },\r\n          {\r\n            title: 'High',\r\n            value: `🟠 ${results.highCount}`,\r\n            short: true\r\n          },\r\n          {\r\n            title: 'Medium',\r\n            value: `🟡 ${results.mediumCount}`,\r\n            short: true\r\n          }\r\n        ],\r\n        footer: 'GnFortress Docker Security Scanner',\r\n        ts: Math.floor(Date.now() / 1000)\r\n      }]\r\n    };\r\n    \r\n    await axios.post(webhookUrl, payload, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    core.info('✅ Slack notification sent successfully');\r\n    \r\n  } catch (error) {\r\n    core.warning(`⚠️ Failed to send Slack notification: ${error.message}`);\r\n  }\r\n}\r\n\r\n// GitHub PR 코멘트 추가\r\nasync function addPRComment(token, results, imageName) {\r\n  try {\r\n    const octokit = github.getOctokit(token);\r\n    const context = github.context;\r\n    \r\n    if (context.eventName !== 'pull_request') {\r\n      core.info('ℹ️ Not a pull request event, skipping PR comment');\r\n      return;\r\n    }\r\n    \r\n    const statusEmoji = {\r\n      'success': '✅',\r\n      'warning': '⚠️',\r\n      'failure': '❌'\r\n    };\r\n    \r\n    const emoji = statusEmoji[results.scanStatus] || '📊';\r\n    \r\n    const comment = `## ${emoji} Docker Security Scan Results\r\n    \r\n**Image:** \\`${imageName}\\`  \r\n**Status:** ${results.scanStatus.toUpperCase()}  \r\n**Scan Time:** ${results.scanTimestamp}\r\n\r\n### 📊 Vulnerability Summary\r\n| Severity | Count |\r\n|----------|-------|\r\n| 🔴 Critical | ${results.criticalCount} |\r\n| 🟠 High | ${results.highCount} |\r\n| 🟡 Medium | ${results.mediumCount} |\r\n| 🟢 Low | ${results.lowCount} |\r\n| **Total** | **${results.vulnerabilityCount}** |\r\n\r\n### 🏰 Powered by GnFortress\r\nEnterprise-grade security scanning in 5 minutes\r\n\r\n${results.criticalCount > 0 ? '⚠️ **Critical vulnerabilities detected!** Please review and address these issues before merging.' : ''}\r\n${results.vulnerabilityCount === 0 ? '🎉 No vulnerabilities found! Your image is secure.' : ''}\r\n    `;\r\n    \r\n    await octokit.rest.issues.createComment({\r\n      owner: context.repo.owner,\r\n      repo: context.repo.repo,\r\n      issue_number: context.payload.pull_request.number,\r\n      body: comment\r\n    });\r\n    \r\n    core.info('✅ PR comment added successfully');\r\n    \r\n  } catch (error) {\r\n    core.warning(`⚠️ Failed to add PR comment: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Action 실행\r\nrun();\r\n\r\n// ===========================================\r\n// 테스트용 Export (프로덕션에서는 사용되지 않음)\r\n// ===========================================\r\nif (process.env.NODE_ENV === 'test') {\r\n  module.exports = {\r\n    run,\r\n    installTrivy,\r\n    getLatestTrivyVersion,\r\n    pullDockerImage,\r\n    runTrivyScan,\r\n    processScanResults,\r\n    sendSlackNotification,\r\n    addPRComment\r\n  };\r\n}"],"mappings":"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","ignoreList":[]}